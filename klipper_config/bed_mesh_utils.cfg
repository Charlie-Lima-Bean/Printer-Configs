[gcode_macro _bed_mesh_summary_stats]
variable_loaded: False
variable_min: 0
variable_max: 0
gcode:
    SET_GCODE_VARIABLE MACRO=_bed_mesh_summary_stats VARIABLE=loaded VALUE={ False }
    ; it's initialized to [[]]... which is technically not empty
    ; but we still don't want to run into None[0], so check both, I guess
    {% if printer.bed_mesh.probed_matrix and printer.bed_mesh.probed_matrix[0] %}
        ; klipper / jinja are unable to use map(), list comprehension, or min/max, so here we are
        ; declaring a variable outside of the for loop is apparently a different scope than inside? 
        ; either way, values refused to persist, so using the globally scoped vars instead

        {% set ns = namespace(z_min=printer.bed_mesh.probed_matrix[0][0], z_max = printer.bed_mesh.probed_matrix[0][0]) %}
        {% for row in printer.bed_mesh.probed_matrix %}
            {% for mesh_z in row %}
                {% if mesh_z < ns.z_min %}
                    {% set ns.z_min = mesh_z %}
                {% endif %}
                {% if mesh_z > ns.z_max %}
                    {% set ns.z_max = mesh_z %}
                {% endif %}
            {% endfor %}
        {% endfor %}
        SET_GCODE_VARIABLE MACRO=_bed_mesh_summary_stats VARIABLE=min VALUE={ ns.z_min }
        SET_GCODE_VARIABLE MACRO=_bed_mesh_summary_stats VARIABLE=max VALUE={ ns.z_max }
        SET_GCODE_VARIABLE MACRO=_bed_mesh_summary_stats VARIABLE=loaded VALUE={ True }
        { action_respond_info('Bed Mesh Stats-> min %f, max %f, all %s' % (printer['gcode_macro _bed_mesh_summary_stats'].min, printer['gcode_macro _bed_mesh_summary_stats'].max, printer.bed_mesh.probed_matrix)) }
    {% else %}
        { action_respond_info('Bed Mesh not loaded, skipping summary stats. v: %s' % (printer.bed_mesh.probed_matrix)) }
    {% endif %}

[gcode_macro _assert_bed_mesh_range]
gcode:
    {% set MAXRANGE = params.MAXRANGE | float %}

    _bed_mesh_summary_stats

    {% if printer['gcode_macro _bed_mesh_summary_stats'].loaded %}
        {% set MINV = printer['gcode_macro _bed_mesh_summary_stats'].min | float %}
        {% set MAXV = printer['gcode_macro _bed_mesh_summary_stats'].max | float %}

        {% if (MAXV - MINV) > MAXRANGE %}
            { action_respond_info('Bed Mesh range exceeded expectation (%f - %f) = %f > %f' % (MAXV, MINV, MAXV - MINV, MAXRANGE)) }
            BED_MESH_CLEAR
            G32
        {% else %}
            { action_respond_info('Bed Mesh looks good: min %f, max %f' % (MINV, MAXV)) }
        {% endif %}
    {% endif %}