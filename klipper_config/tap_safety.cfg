
[gcode_macro _tap_variables]
variable_safety_armed: False   # probe trigger will result in e-stop when armed
variable_scrubbing: False

# @TODO theoretically, this should make us never trigger, because on_release should reset the count
# in practice, on_press seems to be more like "is_pressed", given the amount of terminal spam we've logged
variable_trigger_count: 0
variable_trigger_threshold: 5 

variable_dry_run_stopped: False ; webhooks.state SHOULD prevent us from spamming the terminal in a live run
gcode:


[gcode_macro _reset_tap_count]
gcode:
    {% set safety_armed = printer['gcode_macro _tap_variables'].safety_armed %}
    {% if safety_armed %}
        { action_respond_info('[Tap Safety] Resetting count') }
        SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=trigger_count VALUE={ 0 }
    {% endif %}

[gcode_macro _arm_tap_safety]
description: Arms tap safety
gcode:
    SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=safety_armed VALUE={ True }
    { action_respond_info('[Tap Safety] Armed!') }

[gcode_macro _disarm_tap_safety]
description: Disarms tap safety
gcode:
    SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=safety_armed VALUE={ False }
    { action_respond_info('[Tap Safety] Disarmed!') }

[gcode_macro _scrub_start]
gcode:
    { action_respond_info('[Tap Safety] Scrubbing start') }
    SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=scrubbing VALUE={ True }


[gcode_macro _scrub_end]
gcode:
    { action_respond_info('[Tap Safety] Scrubbing end') }
    SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=scrubbing VALUE={ False }

[gcode_macro _assert_tap_safety_disarmed]
description: Soft abort if tap safety is armed. Typically indicates a programming error, rather than a safety hazard.
gcode:
    {% set msg  = params.MSG | default("Tap Safety unexpectedly armed") | string %}
    {% set safety_armed = printer["gcode_macro _tap_variables"].safety_armed %}

    {% if safety_armed %}
        { action_raise_error(msg) }
    {% endif %}

[gcode_macro _tap_triggered]
description: Full e-stop iff safety is armed. Should be called whenever tap is triggered.
gcode:
    {% set stopped = printer.webhooks.state in ['Shutdown', 'Error', 'shutdown', 'error'] or printer['gcode_macro _tap_variables'].dry_run_stopped %}

    {% set safety_armed = printer['gcode_macro _tap_variables'].safety_armed %}
    {% set scrubbing = printer['gcode_macro _tap_variables'].scrubbing %}

    {% set count = printer['gcode_macro _tap_variables'].trigger_count | int %}
    {% set threshold = printer['gcode_macro _tap_variables'].trigger_threshold | int %}

    SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=trigger_count VALUE={ 0 }
    {% if safety_armed and not scrubbing and not stopped %}
        {% if count > threshold %}
            { action_emergency_stop('[Tap Safety]') }
            { action_respond_info('[Tap Safety] e-stopping!') }
            M117 Tap Safety triggered, e-stopped!
            SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=dry_run_stopped VALUE={ True }
        {% else %}
            SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=trigger_count VALUE={ count + 1 }
            { action_respond_info('[Tap Safety] Triggered, count is now %d' % (count + 1)) }
        {% endif %}
    {% endif %}