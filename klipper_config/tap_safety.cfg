
[gcode_macro _tap_variables]
variable_safety_armed: False   # probe trigger will result in e-stop when armed
variable_scrubbing: False
variable_trigger_count: 0
variable_trigger_threshold: 5
gcode:


[gcode_macro _reset_tap_count]
gcode:
    SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=trigger_count VALUE={ 0 }

[gcode_macro _arm_tap_safety]
description: Arms tap safety
gcode:
    SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=safety_armed VALUE={ True }
    { action_respond_info('Tap Safety armed!') }

[gcode_macro _disarm_tap_safety]
description: Disarms tap safety
gcode:
    SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=safety_armed VALUE={ False }
    { action_respond_info('Tap Safety disarmed!') }

[gcode_macro _scrub_start]
gcode:
    SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=scrubbing VALUE={ True }


[gcode_macro _scrub_end]
gcode:
    SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=scrubbing VALUE={ False }

[gcode_macro _assert_tap_safety_disarmed]
description: Soft abort if tap safety is armed. Typically indicates a programming error, rather than a safety hazard.
gcode:
    {% set msg  = params.MSG | default("Tap Safety unexpectedly armed") | string %}
    {% set safety_armed = printer["gcode_macro _tap_variables"].safety_armed %}

    {% if safety_armed %}
        { action_raise_error(msg) }
    {% endif %}

[gcode_macro _tap_triggered]
description: Full e-stop iff safety is armed. Should be called whenever tap is triggered.
gcode:
    {% set safety_armed = printer['gcode_macro _tap_variables'].safety_armed %}
    {% set scrubbing = printer['gcode_macro _tap_variables'].scrubbing %}
    {% set stopped = printer.webhooks.state in ['shutdown', 'error'] %}
    {% set past_threshold = printer['gcode_macro _tap_variables'].trigger_count > printer['gcode_macro _tap_variables'].trigger_threshold %}

    SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=trigger_count VALUE={ 0 }
    {% if safety_armed and past_threshold and not scrubbing and not stopped %}
        # { action_emergency_stop('Tap Safety triggered') }
        { action_respond_info('Tap Safety triggered, e-stopping!') }
        M117 Tap Safety triggered, e-stopped!
    {% else %}
        SET_GCODE_VARIABLE MACRO=_tap_variables VARIABLE=trigger_count VALUE={ printer['gcode_macro _tap_variables'].trigger_count + 1 }
    {% endif %}